{
    "openapi": "3.0.0",
    "info": {
        "title": "E-commerce API Documentation",
        "description": "API documentation for the E-commerce backend project.",
        "contact": {
            "email": "admin@example.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://127.0.0.1:8000",
            "description": "API Server"
        }
    ],
    "paths": {
        "/api/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "description": "Creates a new user account.",
                "operationId": "registerUser",
                "requestBody": {
                    "description": "User registration data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User registered successfully"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticate user and get token",
                "description": "Logs in a user and returns an access token.",
                "operationId": "loginUser",
                "requestBody": {
                    "description": "User login data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Login successful"
                                        },
                                        "access_token": {
                                            "type": "string",
                                            "example": "1|aBcDeFgHiJkLmNoPqRsTuVwXyZ..."
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid login details"
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Log out the current user",
                "description": "Invalidates the current user's access token.",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/products/{product}/bids": {
            "post": {
                "tags": [
                    "Bidding"
                ],
                "summary": "Place a bid on an auction product",
                "description": "Allows an authenticated user to place a bid on a product of type 'auction'. The bid must be higher than the current highest bid, and the auction must not have ended.",
                "operationId": "placeBidOnProduct",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "The ID of the auction product",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The amount for the bid",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "bid_amount"
                                ],
                                "properties": {
                                    "bid_amount": {
                                        "description": "Must be higher than the current highest bid.",
                                        "type": "number",
                                        "format": "float",
                                        "example": 99.99
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Bid placed successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Bid placed successfully."
                                        },
                                        "bid": {
                                            "$ref": "#/components/schemas/Bid"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "404": {
                        "description": "Product not found"
                    },
                    "422": {
                        "description": "Validation Error (e.g., bid is too low, auction has ended, or product is not an auction item)"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/auth/google/redirect": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Redirect to Google for authentication",
                "description": "Generates a redirect URL to Google's OAuth consent screen.",
                "operationId": "redirectToGoogle",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "redirect_url": {
                                            "type": "string",
                                            "example": "https://accounts.google.com/o/oauth2/v2/auth?..."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/auth/google/callback": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Handle Google OAuth callback",
                "description": "Handles the callback from Google, creates/retrieves a user, and returns a Sanctum token.",
                "operationId": "handleGoogleCallback",
                "parameters": [
                    {
                        "name": "code",
                        "in": "query",
                        "description": "The authorization code from Google",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "The state parameter from Google",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful authentication",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "access_token": {
                                            "type": "string",
                                            "example": "1|aBcDeFgHiJkLmNoPqRsTuVwXyZ..."
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "Bearer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/orders": {
            "post": {
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new order with multiple products",
                "description": "Creates an order with one or more fixed-price products and initiates payment via MyFatoorah. Supports idempotency to prevent duplicate orders.",
                "operationId": "createOrder",
                "requestBody": {
                    "description": "Order payload",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrder"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Order created successfully. Please proceed to payment."
                                        },
                                        "order_id": {
                                            "type": "integer",
                                            "example": 456
                                        },
                                        "payment_url": {
                                            "type": "string",
                                            "example": "https://demo.myfatoorah.com/payment/pay?invoiceId=inv_789"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Existing order retrieved (idempotency)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Order already exists. Please proceed to payment."
                                        },
                                        "order_id": {
                                            "type": "integer",
                                            "example": 456
                                        },
                                        "payment_url": {
                                            "type": "string",
                                            "example": "https://demo.myfatoorah.com/payment/pay?invoiceId=inv_789"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation or business rule failure",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Not enough stock available for one or more products."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error when creating order or initiating payment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Failed to create order. Please try again."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/payment/callback/{order}": {
            "get": {
                "tags": [
                    "Payment Callbacks"
                ],
                "summary": "Handle successful payment callback",
                "description": "This is the callback URL for the MyFatoorah payment gateway to notify the system of a successful payment. It verifies the payment status and updates the order accordingly.",
                "operationId": "handlePaymentCallback",
                "parameters": [
                    {
                        "name": "order",
                        "in": "path",
                        "description": "The ID of the order being paid.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "paymentId",
                        "in": "query",
                        "description": "The payment ID provided by MyFatoorah.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Payment successful. Your order has been confirmed."
                                        },
                                        "order_id": {
                                            "type": "integer",
                                            "example": 123
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid callback (e.g., missing paymentId)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid payment callback."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Payment verification failed (e.g., payment not 'Paid')",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Payment was not successful."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error during verification",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "An unexpected error occurred during payment verification. Please contact support."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/payment/error/{order}": {
            "get": {
                "tags": [
                    "Payment Callbacks"
                ],
                "summary": "Handle failed or cancelled payment callback",
                "description": "This is the error URL for the MyFatoorah payment gateway. It is called when a payment fails, is cancelled by the user, or encounters an error.",
                "operationId": "handlePaymentError",
                "parameters": [
                    {
                        "name": "order",
                        "in": "path",
                        "description": "The ID of the order that failed.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "paymentId",
                        "in": "query",
                        "description": "The payment ID provided by MyFatoorah, if available.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Payment failed or was cancelled",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Payment was cancelled or failed. Please try again."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get list of all products",
                "description": "Returns a paginated list of all products, including their type-specific attributes.",
                "operationId": "getProductsList",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "description": "Creates a new product. Requires authentication.",
                "operationId": "storeProduct",
                "requestBody": {
                    "description": "Product data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "description",
                                    "type"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "New Gaming PC"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "A very fast gaming PC."
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "fixed_price",
                                            "auction"
                                        ],
                                        "example": "fixed_price"
                                    },
                                    "price": {
                                        "description": "Required if type is 'fixed_price'.",
                                        "type": "number",
                                        "format": "float",
                                        "example": 1999.99
                                    },
                                    "stock_quantity": {
                                        "description": "Required if type is 'fixed_price'.",
                                        "type": "integer",
                                        "example": 50
                                    },
                                    "starting_price": {
                                        "description": "Required if type is 'auction'.",
                                        "type": "number",
                                        "format": "float",
                                        "example": 1500
                                    },
                                    "auction_end_time": {
                                        "description": "Required if type is 'auction'.",
                                        "type": "string",
                                        "format": "date-time",
                                        "example": "2025-01-01T00:00:00Z"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductResource"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/products/{product}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get a single product's details",
                "description": "Returns the details of a single product by its ID. Uses route-model binding.",
                "operationId": "getProductById",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Products"
                ],
                "summary": "Update an existing product",
                "description": "Updates a product's details. Requires authentication.",
                "operationId": "updateProduct",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Product data to update. Note: changing 'type' is generally not recommended and may require sending all relevant fields for the new type.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductResource"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Resource Not Found"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Delete a product",
                "description": "Deletes a product by its ID. Requires authentication.",
                "operationId": "deleteProduct",
                "parameters": [
                    {
                        "name": "product",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Resource Not Found"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "RegisterRequest": {
                "title": "Register Request",
                "required": [
                    "name",
                    "email",
                    "password",
                    "password_confirmation"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Hazem"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "hazem@example.com"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "example": "password"
                    },
                    "password_confirmation": {
                        "type": "string",
                        "format": "password",
                        "example": "password"
                    }
                },
                "type": "object"
            },
            "LoginRequest": {
                "title": "Login Request",
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "hazem@example.com"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "example": "password"
                    }
                },
                "type": "object"
            },
            "User": {
                "title": "User Model",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Hazem"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "hazem@example.com"
                    },
                    "google_id": {
                        "type": "string",
                        "example": "123456789012345678901",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "OrderItem": {
                "required": [
                    "product_id",
                    "quantity"
                ],
                "properties": {
                    "product_id": {
                        "type": "integer",
                        "example": 1
                    },
                    "quantity": {
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "CreateOrder": {
                "properties": {
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderItem"
                        }
                    },
                    "idempotency_key": {
                        "description": "Optional client-generated idempotency key",
                        "type": "string",
                        "example": "unique-key-123"
                    }
                },
                "type": "object"
            },
            "StoreOrderRequest": {
                "title": "Store Order Request",
                "required": [
                    "items"
                ],
                "properties": {
                    "items": {
                        "description": "An array of products to include in the order.",
                        "type": "array",
                        "items": {
                            "required": [
                                "product_id",
                                "quantity"
                            ],
                            "properties": {
                                "product_id": {
                                    "description": "The ID of the product.",
                                    "type": "integer",
                                    "example": 1
                                },
                                "quantity": {
                                    "description": "The quantity of the product.",
                                    "type": "integer",
                                    "example": 2
                                }
                            },
                            "type": "object"
                        }
                    },
                    "idempotency_key": {
                        "description": "A unique key to prevent duplicate order creation on network retries.",
                        "type": "string",
                        "example": "unique-key-for-this-purchase-123",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "ProductResource": {
                "title": "Product Resource",
                "description": "Product resource model",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Vintage T-Shirt"
                    },
                    "description": {
                        "type": "string",
                        "example": "A cool vintage t-shirt from the 90s."
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "fixed_price",
                            "auction"
                        ],
                        "example": "fixed_price"
                    },
                    "price": {
                        "description": "Present only for 'fixed_price' products.",
                        "type": "number",
                        "format": "float",
                        "example": 29.99
                    },
                    "stock_quantity": {
                        "description": "Present only for 'fixed_price' products.",
                        "type": "integer",
                        "example": 100
                    },
                    "starting_price": {
                        "description": "Present only for 'auction' products.",
                        "type": "number",
                        "format": "float",
                        "example": 50
                    },
                    "current_highest_bid": {
                        "description": "Present only for 'auction' products.",
                        "type": "number",
                        "format": "float",
                        "example": 75.5
                    },
                    "auction_end_time": {
                        "description": "Present only for 'auction' products.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-12-31T23:59:59.000000Z"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "Bid": {
                "title": "Bid",
                "description": "Bid model",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "user_id": {
                        "description": "The ID of the user who placed the bid",
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "description": "The ID of the product being bid on",
                        "type": "integer",
                        "example": 5
                    },
                    "bid_amount": {
                        "type": "number",
                        "format": "float",
                        "example": 85.5
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "sanctum": {
                "type": "http",
                "description": "Sanctum Bearer Token",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "tags": [
        {
            "name": "Orders",
            "description": "Order processing operations"
        },
        {
            "name": "Payment Callbacks",
            "description": "Endpoints for handling payment gateway callbacks. These are not intended for direct use by API clients."
        },
        {
            "name": "Authentication",
            "description": "Authentication"
        },
        {
            "name": "Bidding",
            "description": "Bidding"
        },
        {
            "name": "Products",
            "description": "Products"
        }
    ]
}